{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Design of an Analog-Digital-Converter after the ADS1115\"\n",
        "---\n",
        "\n",
        "# VERY IMPORTANT, PLEASE READ\n",
        "\n",
        "To get the quarto output to behave properly, some steps have to be taken.\n",
        "\n",
        "1. When parsing data from .raw files, the toolbox will throw a warning. To prevent this, right click on \"l.parse()\" -> \"Go to definition\". There, you comment out  line 197 and the warning is gone.\n",
        "\n",
        "2. To justify text I added a custom command in \"styles.css\". To use this command and have the text appearance be nicer, use \"::: {.justify}\" at the beginning of each chapter\n",
        "\n",
        "3. Whenever referencing to a figure, some data file, etc. and you compile the whole document (\"report_grp4.qmd\") the paths specified have to be relative to the main document, otherwise quarto won't find the specified file\n",
        "\n",
        "4. If you need help with importing .raw files using python, please look at my version in chapters/clock_gen/clock_gen.qmd\n",
        "\n",
        "\n",
        "# Introduction\n",
        "This is the introduction to our report.\n",
        "\n",
        "## Wow\n",
        "It even has subchapters!\n",
        "\n",
        "For a demonstration of a line plot on a polar axis, see @fig-polar."
      ],
      "id": "05133262"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-polar\n",
        "#| fig-cap: A line plot on a polar axis\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "r = np.arange(0, 2, 0.01)\n",
        "theta = 2 * np.pi * r\n",
        "fig, ax = plt.subplots(\n",
        "  subplot_kw = {'projection': 'polar'} \n",
        ")\n",
        "ax.plot(theta, r)\n",
        "ax.set_rticks([0.5, 1, 1.5, 2])\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "id": "fig-polar",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Theory\n",
        "\n",
        "## System overview of the $\\Delta$$\\Sigma$ modulator\n",
        "\n",
        "## Switched Capacitor Integrator\n",
        "\n",
        "The desired loop filter for the modulator will be realised utilizing an active integrator circuit that utilizes a switched capacitance input stage.\n",
        "\n",
        "\n",
        "\n",
        "# Clock-Phase generation\n",
        "\n",
        "::: {.justify}\n",
        "\n",
        "The aforementioned delay in the phases of the clocks acting on the switched capacitor can be achieved by the structure in figure @fig-phase_gen. This takes a reference clock signal which provides a signal at the frequency required by the system and outputs four different phases $\\phi_1$, $\\phi_{1d}$, $\\phi_2$ and $\\phi_{2d}$. The feedback between the upper and lower strand of the structure ensures the prevention of overlap between $\\phi_1$ and $\\phi_2$ and in turn for their respective delayed versions.\n",
        "\n",
        "![Basic structure for delayed clock phase generation](figures/clk_gen/schem_clock_generation.svg){#fig-phase_gen text-align=\"left\"}\n",
        "\n",
        "By changing the capacitance of the marked inverters the actual delay between $\\phi_i$ and $\\phi_{id}$ can be controlled. It is worth noting however, that the capacitive load $C_L$ experienced at the outputs of the structure also has an influence on the phase delay, as can be seen in figure @fig-delay_norm"
      ],
      "id": "60d66fcf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-delay_norm\n",
        "#| fig-cap: Delayed clock signals\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import ltspice as lt\n",
        "\n",
        "#parse data from .raw file\n",
        "#for compiling the finished document this path needs to be relative to \"report_grp4.qmd\"\n",
        "fpath       = '../../matlab_python/clk_gen/tb_clkgen.raw'\n",
        "l           = lt.Ltspice(fpath)\n",
        "l.parse()\n",
        "\n",
        "#extract relevant data\n",
        "time        = l.get_time()\n",
        "vclk        = l.get_data('v(clkin)')\n",
        "vp1         = l.get_data('v(p1)')\n",
        "vp1e        = l.get_data('v(p1e)')\n",
        "vp2         = l.get_data('v(p2)')\n",
        "vp2e        = l.get_data('v(p2e)')\n",
        "\n",
        "#redefine data arrays considering new length\n",
        "factor = 10\n",
        "length = round(len(time)/factor)\n",
        "\n",
        "time    = time[:length]\n",
        "vclk    = np.flip(vclk[:length])\n",
        "vp1     = np.flip(vp1[:length])\n",
        "vp1e    = np.flip(vp1e[:length])\n",
        "vp2     = np.flip(vp2[:length])\n",
        "vp2e    = np.flip(vp2e[:length])\n",
        "\n",
        "#plot data\n",
        "plt.close('all')\n",
        "plt.figure(1)\n",
        "plt.plot(time*1e9, vp1, label=r'$\\phi_1$')\n",
        "plt.plot(time*1e9, vp1e, label=r'$\\phi_{1d}$')\n",
        "plt.plot(time*1e9, vp2, label=r'$\\phi_2$')\n",
        "plt.title('Voltage input clock over time')\n",
        "plt.xlabel('$t$/ns')\n",
        "plt.ylabel('V')\n",
        "plt.legend()\n",
        "plt.grid()"
      ],
      "id": "fig-delay_norm",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Figure @fig-delay_norm shows the normal delay between $\\phi_1$ and $\\phi_{1d}$ as well as the non-overlap with $\\phi_2$. These curves were generated by simulating the clock generation circuit provided by B. Murmann [@murmann]\n",
        "\n",
        "\n",
        "\n",
        "# References"
      ],
      "id": "1c58413a"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\nicki\\anaconda3\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}